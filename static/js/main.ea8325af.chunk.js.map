{"version":3,"sources":["helpers/index.js","redux/reducers.js","stores.js","redux/types.js","features/TodoList/Components/Todo.js","features/TodoList/Components/TodoForm.js","features/TodoList/TodoList.js","redux/actions.js","App.js","serviceWorker.js","index.js"],"names":["formatDate","date","parseInt","getMonth","getDate","getFullYear","initialState","visibleTodoList","id","uuidv4","title","isCompleted","Date","initialTodoList","loading","error","dateSearch","allReducers","todoReducers","state","action","type","payload","map","todo","filter","console","log","helpers","indexOf","reducers","combineReducers","stores","createStore","composeWithDevTools","Todo","props","className","length","idx","key","Row","style","display","aligntodos","justifyContent","Col","xs","textAlign","Button","color","size","onClick","completeTodo","viewTodo","removeTodo","TodoForm","useState","startDate","setStartDate","setTodo","Badge","Form","FormGroup","Label","htmlFor","Input","name","placeholder","onChange","e","value","target","newObj","selected","handleAddTodo","handleClearTodo","event","handleChangeSearch","mapDispatchToProps","setTasks","ToggleCompletion","searchTasks","connect","_removeTodo","Object","keys","todoDate","_handleAddTodo","_handleChangeSearch","_completeTodo","_viewTodo","App","Boolean","window","location","hostname","match","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.ea8325af.chunk.js","sourcesContent":["export const formatDate = (date) => {\n  let datePicker =\n    parseInt(date.getMonth() + 1) +\n    \"/\" +\n    date.getDate() +\n    \"/\" +\n    date.getFullYear();\n  return datePicker;\n};\n","import {\n  ADD_TASK,\n  REMOVE_TASK,\n  COMPLETE_TASK,\n  SEARCH_DATE_TASK,\n} from \"./types\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport * as helpers from \"../helpers/index\";\nconst initialState = {\n  visibleTodoList: [\n    {\n      id: uuidv4(),\n      title: \"task default 1\",\n      isCompleted: false,\n      date: new Date(),\n    },\n    {\n      id: uuidv4(),\n      title: \"task default 2\",\n      isCompleted: false,\n      date: new Date(),\n    },\n  ],\n  initialTodoList: [\n    {\n      id: uuidv4(),\n      title: \"task default 1\",\n      isCompleted: false,\n      date: new Date(),\n    },\n    {\n      id: uuidv4(),\n      title: \"task default 2\",\n      isCompleted: false,\n      date: new Date(),\n    },\n  ],\n  loading: false,\n  error: false,\n  dateSearch: \"\",\n};\n\nconst reducers = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_TASK: {\n      return {\n        ...state,\n        visibleTodoList: [...state.visibleTodoList, action.payload],\n        initialTodoList: [...state.visibleTodoList, action.payload],\n      };\n    }\n    case COMPLETE_TASK: {\n      return {\n        ...state,\n        visibleTodoList: state.visibleTodoList.map((todo) => {\n          if (todo.id === action.payload.id) {\n            todo.isCompleted = !todo.isCompleted;\n          }\n          return todo;\n        }),\n      };\n    }\n    case REMOVE_TASK: {\n      return {\n        ...state,\n        visibleTodoList: state.visibleTodoList.filter(\n          (todo) => todo.id !== action.payload.id\n        ),\n      };\n    }\n    case SEARCH_DATE_TASK: {\n      console.log(helpers);\n      return {\n        ...state,\n        visibleTodoList: state.initialTodoList.filter((todo) =>\n          helpers.formatDate(todo.date).indexOf(action.payload.date)\n        ),\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nexport default reducers;\n","import { createStore, combineReducers } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\n//import reducers\n\nimport todoReducers from \"./redux/reducers\";\n\n//config for Reducers\n\nconst allReducers = {\n  todoReducers,\n};\nconst reducers = combineReducers({\n  ...allReducers,\n});\nconst stores = createStore(reducers, composeWithDevTools());\nexport default stores;\n","export const ADD_TASK = \"TODO/ADD_TASK\";\n\nexport const REMOVE_TASK = \"TODO/REMOVE_TASK\";\nexport const COMPLETE_TASK = \"TODO/COMPLETE_TASK\";\nexport const SEARCH_DATE_TASK = \"TODO/SEARCH_DATE_TASK\";\n","import React from \"react\";\nimport { Button, Col, Row } from \"reactstrap\";\nconst Todo = (props) => {\n  const { visibleTodoList } = props;\n  console.log(\"OUTPUT: Todo -> visibleTodoList\", visibleTodoList);\n  const formatDate = (date) => {\n    let datePicker =\n      parseInt(date.getMonth() + 1) +\n      \"/\" +\n      date.getDate() +\n      \"/\" +\n      date.getFullYear();\n    return datePicker;\n  };\n  return (\n    <>\n      <div className=\"todo__wrapper\">\n        <ul className=\"list-wrapper\">\n          {visibleTodoList.length > 0 ? (\n            visibleTodoList.map((todo, idx) => {\n              return (\n                <li key={todo.id} className=\"todo-item\">\n                  <Row\n                    style={{\n                      display: \"flex\",\n                      aligntodos: \"center\",\n                      justifyContent: \"space-between\",\n                    }}\n                  >\n                    <Col xs=\"1\" style={{ textAlign: \"center\" }}>\n                      {idx}\n                    </Col>\n                    <Col xs=\"6\">\n                      <div\n                        className={`todo__title ${\n                          todo.isCompleted ? \"completed\" : \"\"\n                        }`}\n                      >\n                        {todo.title}\n                      </div>\n                    </Col>\n                    <Col>\n                      <div className=\"todo__date-time text-center\">\n                        <span className=\"todo__date-time__content\">\n                          {formatDate(todo.date)}\n                        </span>\n                      </div>\n                    </Col>\n                    <Col>\n                      <div className=\"btn-container\">\n                        <Button\n                          color=\"success\"\n                          className=\"btn-addtodo\"\n                          size=\"md\"\n                          onClick={() => props.completeTodo(todo.id)}\n                        >\n                          {`${todo.isCompleted ? \"Completed\" : \"Complete\"}`}\n                        </Button>\n                        <Button\n                          color=\"primary\"\n                          className=\"btn-addtodo\"\n                          size=\"md\"\n                          onClick={() => props.viewTodo(todo.id)}\n                        >\n                          View Detail\n                        </Button>\n                        <Button\n                          color=\"danger\"\n                          className=\"btn-addtodo\"\n                          size=\"md\"\n                          onClick={() => props.removeTodo(todo.id)}\n                        >\n                          Remove\n                        </Button>\n                      </div>\n                    </Col>\n                  </Row>\n                </li>\n              );\n            })\n          ) : (\n            <p>Please, add your task to show</p>\n          )}\n        </ul>\n      </div>\n    </>\n  );\n};\n\nexport default Todo;\n","import React, { useState } from \"react\";\nimport {\n  Button,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  Col,\n  Row,\n  Badge,\n} from \"reactstrap\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nconst TodoForm = (props) => {\n  const [startDate, setStartDate] = useState(new Date());\n  const [todo, setTodo] = useState({});\n\n  const handleChange = (e) => {\n    const { value } = e.target;\n    if (value !== \"\") {\n      const newObj = {\n        id: uuidv4(),\n        title: value,\n        isCompleted: false,\n        date: startDate,\n      };\n      setTodo(newObj);\n    }\n  };\n\n  return (\n    <>\n      <h1 className=\"text-center\">\n        Please input <Badge color=\"success\"> a task </Badge>\n      </h1>\n      <div className=\"form-wrapper\">\n        <Form>\n          <FormGroup>\n            <Label htmlFor=\"inputTask\">Your Task</Label>\n            <Row>\n              <Col xs=\"8\">\n                <Input\n                  type=\"text\"\n                  name=\"taskName\"\n                  id=\"inputTask\"\n                  placeholder=\"Please input your task\"\n                  onChange={handleChange}\n                />\n              </Col>\n              <Col xs=\"4\">\n                <DatePicker\n                  selected={startDate}\n                  onChange={(date) => setStartDate(date)}\n                />\n              </Col>\n            </Row>\n          </FormGroup>\n        </Form>\n        <div className=\"btn-conttainer\">\n          <Button\n            color=\"primary\"\n            className=\"btn-addtodo\"\n            size=\"lg\"\n            onClick={() => props.handleAddTodo(todo)}\n          >\n            Add Task\n          </Button>\n          <Button\n            color=\"danger\"\n            className=\"btn-addtodo\"\n            size=\"lg\"\n            onClick={props.handleClearTodo}\n          >\n            Clear Task\n          </Button>\n        </div>\n        <h5>Search tasks by day</h5>\n        <Input\n          type=\"text\"\n          name=\"search\"\n          id=\"inputSearch\"\n          placeholder=\"Please input your date for searching\"\n          onChange={(event) => props.handleChangeSearch(event)}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default TodoForm;\n","import React, { useState } from \"react\";\nimport Todo from \"./Components/Todo\";\nimport TodoForm from \"./Components/TodoForm.js\";\nimport { connect } from \"react-redux\";\nimport * as helpers from \"../../helpers\";\nimport {\n  setTasks,\n  ToggleCompletion,\n  removeTodo,\n  searchTasks,\n} from \"../../redux/actions\";\n\nconst TodoList = ({\n  visibleTodoList,\n  setTasks,\n  ToggleCompletion,\n  removeTodo,\n  searchTasks,\n}) => {\n  const _handleAddTodo = (todo) => {\n    if (Object.keys(todo).length > 0) {\n      // console.log(helpers.formatDate(todo.date));\n      const { title, date } = todo;\n      console.log(\"OUTPUT: _handleAddTodo -> title,date\", title, date);\n\n      const todoDate = helpers.formatDate(date);\n      console.log(\"OUTPUT: _handleAddTodo -> todoDate\", todoDate);\n      setTasks(title, date);\n    }\n  };\n\n  //================================================================\n  // Begin local storage\n  //================================================================\n\n  // useEffect(() => {\n  //   if (todos.length > 0) {\n  //     localStorage.setItem(\"myValueInLocalStorage\", todos);\n  //   }\n  // }, [todos]);\n\n  // useEffect(() => {\n  //   if (todos.length > 0) {\n  //     let value = localStorage.getItem(\"myValueInLocalStorage\");\n  //     console.log(\"OUTPUT: TodoList -> value\", value);\n  //   }\n  // }, [todos]);\n\n  //================================================================\n  // End local storage\n  //================================================================\n\n  const _handleClearTodo = () => {\n    const emptyArray = [];\n    setTasks(emptyArray);\n  };\n  const _completeTodo = (id) => {\n    ToggleCompletion(id);\n  };\n  const _removeTodo = (id) => {\n    removeTodo(id);\n  };\n\n  const _viewTodo = (id) => {\n    console.log(\"OUTPUT: _viewTodo -> id\", id);\n  };\n\n  // const formatDate = (date) => {\n  //   let datePicker =\n  //     parseInt(date.getMonth() + 1) +\n  //     \"/\" +\n  //     date.getDate() +\n  //     \"/\" +\n  //     date.getFullYear();\n  //   return datePicker;\n  // };\n  // End format date =================\n\n  const _handleChangeSearch = (event) => {\n    const { value } = event.target;\n    if (value !== \"\") {\n      searchTasks(value);\n    }\n  };\n  // ENd format date =================\n  return (\n    <div>\n      <TodoForm\n        handleAddTodo={(todo) => _handleAddTodo(todo)}\n        handleClearTodo={_handleClearTodo}\n        handleChangeSearch={(event) => _handleChangeSearch(event)}\n      />\n      <Todo\n        visibleTodoList={visibleTodoList}\n        completeTodo={(id) => _completeTodo(id)}\n        viewTodo={(id) => _viewTodo(id)}\n        removeTodo={(id) => _removeTodo(id)}\n      />\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  console.log(state);\n  const {\n    todoReducers: {\n      visibleTodoList,\n      initialTodoList,\n      loading,\n      error,\n      dateSearch,\n    },\n  } = state;\n  return {\n    visibleTodoList,\n    initialTodoList,\n    loading,\n    error,\n    dateSearch,\n  };\n};\n\nconst mapDispatchToProps = {\n  setTasks,\n  ToggleCompletion,\n  removeTodo,\n  searchTasks,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoList);\n","import { v4 as uuidv4 } from \"uuid\";\nimport {\n  ADD_TASK,\n  REMOVE_TASK,\n  COMPLETE_TASK,\n  SEARCH_DATE_TASK,\n} from \"./types\";\n\nexport const setTasks = (title, date) => ({\n  type: ADD_TASK,\n  payload: {\n    id: uuidv4(),\n    title: title,\n    isCompleted: false,\n    date: date,\n  },\n});\n\nexport const ToggleCompletion = (id) => ({\n  type: COMPLETE_TASK,\n  payload: {\n    id,\n  },\n});\n\nexport const removeTodo = (id) => ({\n  type: REMOVE_TASK,\n  payload: {\n    id,\n  },\n});\nexport const searchTasks = (dateSearch) => ({\n  type: SEARCH_DATE_TASK,\n  payload: {\n    dateSearch,\n  },\n});\n","import React from \"react\";\nimport TodoList from \"./features/TodoList/TodoList\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./css/style.css\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <TodoList />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport stores from \"./stores\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <>\n    <Provider store={stores}>\n      <App />\n    </Provider>\n  </>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}